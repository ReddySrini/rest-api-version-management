# Flag to disable API versioning feature. (optional, default=true)
rest.api.version.management.feature.enabled=
# Flag to disable API versioning fallback if requested version is unavail. (optional, default=true if feature is enabled, else false)
rest.api.version.management.fallback.enabled=
# Flag to enable fallback retry with base lookup path without versioning. (optional, default=false)
rest.api.version.management.fallback.retryWithBaseLookupPath=
# API context for versioned APIs. (optional, default="")
rest.api.version.management.apiContext=
# Version context for versioned APIs. (optional, default="")
rest.api.version.management.versionContext=
# Minimum version supported for API versioning. (optional, determined via code if not provided)
rest.api.version.management.min.version.support=
# Maximum version supported for API versioning. (optional, determined via code if not provided)
rest.api.version.management.current.version.support=
# Max decimal digit support for API versions. (optional, default=1)
rest.api.version.management.max.decimal.digit.support=
# Flag to allow the disabled API versions. (optional, default=false)
rest.api.version.management.disabledApiVersions.allowed=
# Flag to include disabled API versions in fallback. (optional, default=true if disabled APIs are allowed, else false)
rest.api.version.management.disabledApiVersions.fallback.enabled=

# Default packages to be scanned if AutoApiVersionCheck annotation is conflicting. (optional, default="")
rest.api.version.management.deafult.scanPackages=
# Default packages to be ignored if AutoApiVersionCheck annotation is conflicting. (optional, default="")
rest.api.version.management.deafult.ignorePackages=
# Default classes to be ignored if AutoApiVersionCheck annotation is conflicting. (optional, default="")
rest.api.version.management.deafult.ignoreClasses=
# Default stopAppOnCheckFail AutoApiVersionCheck annotation is conflicting. (optional, default=false)
rest.api.version.management.deafult.stopAppOnCheckFail=